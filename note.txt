npm init -y 
npm install typescript --save-dev
npx tsc --init
npm install @types/node --save-dev
npm install express
npm install @types/express --save-dev
npm install prisma @prisma/client
npx prisma init


#table create 
npx prisma migrate dev --name CreateUsersTable
// colum increase 
npx prisma migrate dev --name AddRoleToUser 
npx prisma studio

npx prisma migrate dev --name CreateProductsTable
npx prisma migrate dev --name add_game_types
npx ts-node prisma/gameType.seed.ts
npx prisma migrate dev --name add_providers
npx ts-node prisma/provider.seed.ts
npx prisma migrate dev --name add_game_type_providers
npx ts-node prisma/gameTypeProvider.seed.ts
npx prisma generate
npx prisma migrate deploy / to use production
model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String   @db.Text
  price       Decimal  @db.Decimal(10,2)
  tags        String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("products")
 }

 npx prisma migrate dev --name CarTable
 npx prisma generate

// Create new user (Owner can create Agent, Agent can create Sub_Agent and Player)
  async createUser(req: Request, res: Response) {
    const { name, user_name, email, phone, password, role, agent_id } = req.body;
    const currentUser = req.user!;

    // Validate role hierarchy
    if (currentUser.role === 'Owner' && role !== 'Agent') {
      throw new ForbiddenException('Owner can only create Agents', ErrorCode.FORBIDDEN);
    }

    if (currentUser.role === 'Agent' && !['Sub_Agent', 'Player'].includes(role)) {
      throw new ForbiddenException('Agent can only create Sub-Agents and Players', ErrorCode.FORBIDDEN);
    }

    // Hash password
    const hashedPassword = await bcrypt.hash(password, 10);

    const newUser = await prismaClient.user.create({
      data: {
        name,
        user_name,
        email,
        phone,
        password: hashedPassword,
        role,
        agent_id: currentUser.role === 'Agent' ? currentUser.id : agent_id
      }
    });

    res.status(201).json({
      message: 'User created successfully',
      user: {
        id: newUser.id,
        name: newUser.name,
        user_name: newUser.user_name,
        role: newUser.role
      }
    });
  }
