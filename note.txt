npm init -y 
npm install typescript --save-dev
npx tsc --init
npm install @types/node --save-dev
npm install express
npm install @types/express --save-dev
npm install prisma @prisma/client
npx prisma init


#table create 
npx prisma migrate dev --name CreateUsersTable
// colum increase 
npx prisma migrate dev --name AddRoleToUser 
npx prisma migrate dev --name AddRoleToSystemOwner 

npx prisma studio
npx prisma db seed
npx prisma migrate dev --name CreateProductsTable
npx prisma migrate dev --name add_game_types
npx ts-node prisma/gameType.seed.ts
npx prisma migrate dev --name add_providers
npx ts-node prisma/provider.seed.ts
npx prisma migrate dev --name add_game_type_providers
npx ts-node prisma/gameTypeProvider.seed.ts
npx ts-node prisma/gameList.seed.ts
npx prisma generate
npx prisma migrate deploy / to use production
npx prisma format
npx prisma migrate dev --name add-seamless-tables
npm run clean && npm run build
pm2 restart gsc-back_app
pm2 logs gsc-back_app
     cd /root/.pm2/logs/gsc-back_app-out.log
     tail -f /root/.pm2/logs/gsc-back_app-out.log
DATABASE_URL="mysql://root:delighT%40%23%242024team@68.183.228.81:3306/gsc_node"

sudo apt install certbot python3-certbot-nginx
sudo certbot --nginx -d luckymillion.pro -d www.luckymillion.pro
model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String   @db.Text
  price       Decimal  @db.Decimal(10,2)
  tags        String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("products")
 }

 npx prisma migrate dev --name CarTable
 npx prisma generate

// Create new user (Owner can create Agent, Agent can create Sub_Agent and Player)
  async createUser(req: Request, res: Response) {
    const { name, user_name, email, phone, password, role, agent_id } = req.body;
    const currentUser = req.user!;

    // Validate role hierarchy
    if (currentUser.role === 'Owner' && role !== 'Agent') {
      throw new ForbiddenException('Owner can only create Agents', ErrorCode.FORBIDDEN);
    }

    if (currentUser.role === 'Agent' && !['Sub_Agent', 'Player'].includes(role)) {
      throw new ForbiddenException('Agent can only create Sub-Agents and Players', ErrorCode.FORBIDDEN);
    }

    // Hash password
    const hashedPassword = await bcrypt.hash(password, 10);

    const newUser = await prismaClient.user.create({
      data: {
        name,
        user_name,
        email,
        phone,
        password: hashedPassword,
        role,
        agent_id: currentUser.role === 'Agent' ? currentUser.id : agent_id
      }
    });

    res.status(201).json({
      message: 'User created successfully',
      user: {
        id: newUser.id,
        name: newUser.name,
        user_name: newUser.user_name,
        role: newUser.role
      }
    });
  }


///-----------
import express, { Express, Request, Response, NextFunction, ErrorRequestHandler } from 'express';
import { PORT, JWT_SECRET } from './secrets';
import rootRouter from './routes';
import { PrismaClient } from '@prisma/client';
import { errorHandler, notFoundHandler } from './middleware/error.middleware';
import cors from 'cors';


// Validate environment variables
if (!JWT_SECRET) {
    throw new Error('JWT_SECRET is not defined in environment variables');
  }
  
  const app: Express = express();
  
  // Middleware
  app.use(express.json());
  app.use(express.urlencoded({ extended: true }));
  
  // Allow requests from your frontend origin
  app.use(cors({
    origin: 'http://localhost:5173', // or use '*' for all origins (not recommended for production)
    credentials: true // if you need to send cookies or authentication headers
  }));
  
  // Routes with api prefix
  app.use('/api', rootRouter);
  
  
  
  // Health check endpoint
  app.get('/health', (req: Request, res: Response) => {
    res.status(200).json({ status: 'ok' });
  });
  
  // Initialize Prisma Client
  export const prismaClient = new PrismaClient({
    log: process.env.NODE_ENV === 'development' ? ['query', 'info', 'warn', 'error'] : ['error'],
  });
  
  
  // Error handling middleware (must be after all routes)
  app.use(notFoundHandler);
  app.use(errorHandler as ErrorRequestHandler);
  
  // Graceful shutdown
  process.on('SIGINT', async () => {
    await prismaClient.$disconnect();
    process.exit(0);
  });
  
  
  // Start server
  app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
  });
  

  import { Request, Response } from 'express';
import { PrismaClient } from '@prisma/client';
import crypto from 'crypto';
import { GameErrorCode, GameErrorDescription } from '../exceptions/gameErrorCode';
import { RequestTransaction } from '../dtos/RequestTransaction';
import { validate } from 'class-validator';

const prisma = new PrismaClient();

function md5(str: string) {
  return crypto.createHash('md5').update(str).digest('hex');
}

export const placeBet = async (req: Request, res: Response) => {
    
  const {
    MemberName,
    OperatorCode,
    ProductID,
    MessageID,
    RequestTime,
    Sign,
    Transactions,
  } = req.body;

  // 1. Validate required fields
  if (!MemberName || !OperatorCode || !ProductID || !MessageID || !RequestTime || !Sign || !Transactions) {
    return res.json({
      ErrorCode: GameErrorCode.ApiError,
      ErrorMessage: GameErrorDescription[GameErrorCode.ApiError],
      Balance: 0,
      BeforeBalance: 0,
    });
  }

  // 2. Validate signature
  const method = 'placebet';
  const expectedSign = md5(OperatorCode + RequestTime + method + process.env.GAME_SECRET_KEY);
  if (Sign !== expectedSign) {
    return res.json({
      ErrorCode: GameErrorCode.InvalidSign,
      ErrorMessage: GameErrorDescription[GameErrorCode.InvalidSign],
      Balance: 0,
      BeforeBalance: 0,
    });
  }

  // 3. Fetch user
  const user = await prisma.user.findFirst({ where: { user_name: MemberName } });
  if (!user) {
    return res.json({
      ErrorCode: GameErrorCode.MemberNotExists,
      ErrorMessage: GameErrorDescription[GameErrorCode.MemberNotExists],
      Balance: 0,
      BeforeBalance: 0,
    });
  }

  // 4. Validate transactions using DTO and class-validator
  if (!Array.isArray(Transactions) || Transactions.length === 0) {
    return res.json({
      ErrorCode: GameErrorCode.ApiError,
      ErrorMessage: 'Invalid transaction data format.',
      Balance: user.balance,
      BeforeBalance: user.balance,
    });
  }

  // Validate each transaction
  for (const t of Transactions) {
    const tx = Object.assign(new RequestTransaction(), t);
    const errors = await validate(tx);
    if (errors.length > 0) {
      return res.json({
        ErrorCode: GameErrorCode.ApiError,
        ErrorMessage: 'Invalid transaction fields',
        Balance: user.balance,
        BeforeBalance: user.balance,
      });
    }
  }

  // 5. Check for duplicate TransactionID
  const transactionIds = Transactions.map((t: any) => t.TransactionID);
  const existing = await prisma.seamlessTransaction.findFirst({
    where: { transaction_id: { in: transactionIds } }
  });
  if (existing) {
    return res.json({
      ErrorCode: GameErrorCode.DuplicateTransaction,
      ErrorMessage: GameErrorDescription[GameErrorCode.DuplicateTransaction],
      Balance: user.balance,
      BeforeBalance: user.balance,
    });
  }

  // 6. Calculate total TransactionAmount
  const totalTransactionAmount = Transactions.reduce((sum: number, t: any) => sum + (t.TransactionAmount || 0), 0);
  const beforeBalance = Number(user.balance);
  const afterBalance = beforeBalance + totalTransactionAmount;

  if (afterBalance < 0) {
    return res.json({
      ErrorCode: GameErrorCode.MemberInsufficientBalance,
      ErrorMessage: GameErrorDescription[GameErrorCode.MemberInsufficientBalance],
      Balance: beforeBalance,
      BeforeBalance: beforeBalance,
    });
  }

  // 7. Insert transactions and update balance in a transaction
  try {
    await prisma.$transaction(async (tx) => {
      for (const t of Transactions) {
        await tx.seamlessTransaction.create({
          data: {
            user_id: user.id,
            wager_id: BigInt(t.WagerID),
            game_type_id: t.GameType,
            provider_id: typeof t.ProductID === 'string' ? parseInt(t.ProductID) : t.ProductID,
            valid_bet_amount: t.ValidBetAmount,
            bet_amount: t.BetAmount,
            transaction_amount: t.TransactionAmount,
            transaction_id: t.TransactionID,
            payout_amount: t.PayoutAmount,
            status: String(t.Status),
            member_name: t.MemberName,
            created_at: new Date(),
            updated_at: new Date(),
            seamless_event_id: 1, // Set this appropriately if you have event logic
            rate: null, // Set this if you have rate logic
            wager_status: 'Ongoing', // Or set based on your business logic
          }
        });
      }
      await tx.user.update({
        where: { id: user.id },
        data: { balance: afterBalance }
      });
    });

    return res.json({
      ErrorCode: GameErrorCode.Success,
      ErrorMessage: GameErrorDescription[GameErrorCode.Success],
      Balance: afterBalance.toFixed(4),
      BeforeBalance: beforeBalance.toFixed(4),
    });
  } catch (e) {
    return res.json({
      ErrorCode: GameErrorCode.InternalServerError,
      ErrorMessage: GameErrorDescription[GameErrorCode.InternalServerError],
      Balance: beforeBalance,
      BeforeBalance: beforeBalance,
    });
  }
};

export default placeBet;
